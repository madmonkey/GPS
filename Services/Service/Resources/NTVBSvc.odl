[
uuid(936F8605-E2FD-43c9-A8E6-7A5D3EBC85E4),
helpstring("VB-friendly NT Service API Functions"),
version(1.0)
]

library VBNTSvc
{

    #include "wintype1.odl"

	typedef enum SERVICE_TYPE {
		SERVICE_KERNEL_DRIVER		= 0x00000001,
		SERVICE_FILE_SYSTEM_DRIVER	= 0x00000002,
		SERVICE_WIN32_OWN_PROCESS	= 0x00000010,
		SERVICE_WIN32_SHARE_PROCESS	= 0x00000020,
		SERVICE_ADAPTER			= 0x00000004,
		SERVICE_RECOGNIZER_DRIVER	= 0x00000008,
		SERVICE_INTERACTIVE_PROCESS	= 0x00000100,
	} SERVICE_TYPE;

	typedef enum SERVICE_STATE {
		SERVICE_STOPPED			= 0x00000001,
		SERVICE_START_PENDING		= 0x00000002,
		SERVICE_STOP_PENDING		= 0x00000003,
		SERVICE_RUNNING			= 0x00000004,
		SERVICE_CONTINUE_PENDING	= 0x00000005,
		SERVICE_PAUSE_PENDING		= 0x00000006,
		SERVICE_PAUSED			= 0x00000007,
	} SERVICE_STATE;

	typedef enum SERVICE_ACCEPT {
		SERVICE_ACCEPT_STOP                   = 0x00000001,
		SERVICE_ACCEPT_PAUSE_CONTINUE         = 0x00000002,
		SERVICE_ACCEPT_SHUTDOWN               = 0x00000004,
		SERVICE_ACCEPT_PARAMCHANGE            = 0x00000008,
		SERVICE_ACCEPT_NETBINDCHANGE          = 0x00000010,
		SERVICE_ACCEPT_HARDWAREPROFILECHANGE  = 0x00000020,
		SERVICE_ACCEPT_POWEREVENT             = 0x00000040,
	} SERVICE_ACCEPT;

	typedef struct SERVICE_TABLE { 
		DWORD lpServiceName; 
		DWORD lpServiceProc; 
		DWORD lpServiceNameNull; 
		DWORD lpServiceProcNull; 
	} SERVICE_TABLE; 

	typedef SERVICE_TABLE *LPSERVICE_TABLE;

	typedef struct SERVICE_STATUS { 
		SERVICE_TYPE dwServiceType; 
		SERVICE_STATE dwCurrentState; 
		SERVICE_ACCEPT dwControlsAccepted; 
		DWORD dwWin32ExitCode; 
		DWORD dwServiceSpecificExitCode; 
		DWORD dwCheckPoint; 
		DWORD dwWaitHint; 
	} SERVICE_STATUS; 

	typedef SERVICE_STATUS *LPSERVICE_STATUS;

	typedef enum SERVICE_CONTROL {
		SERVICE_CONTROL_STOP                   = 0x00000001,
		SERVICE_CONTROL_PAUSE                  = 0x00000002,
		SERVICE_CONTROL_CONTINUE               = 0x00000003,
		SERVICE_CONTROL_INTERROGATE            = 0x00000004,
		SERVICE_CONTROL_SHUTDOWN               = 0x00000005,
		SERVICE_CONTROL_PARAMCHANGE            = 0x00000006,
		SERVICE_CONTROL_NETBINDADD             = 0x00000007,
		SERVICE_CONTROL_NETBINDREMOVE          = 0x00000008,
		SERVICE_CONTROL_NETBINDENABLE          = 0x00000009,
		SERVICE_CONTROL_NETBINDDISABLE         = 0x0000000A,
		SERVICE_CONTROL_DEVICEEVENT            = 0x0000000B,
		SERVICE_CONTROL_HARDWAREPROFILECHANGE  = 0x0000000C,
		SERVICE_CONTROL_POWEREVENT             = 0x0000000D,
	} SERVICE_CONTROL;

	[
	helpstring("Kernel Functions"),
        dllname("kernel32.dll")
	]
	module Kernel {


	    [
	    entry("CloseHandle"),
	    helpstring("closes an open object handle"),
	    ]
	    BOOL WINAPI CloseHandle(
		[in] HANDLE hObject	// handle to object
	    );

	    [
	    entry("CreateEventA"),
	    helpstring("Creates or opens a named or unnamed event object"),
	    ]
	    HANDLE WINAPI CreateEvent(
		[in] DWORD lpEventAttributes,	// SD
		[in] BOOL bManualReset,		// reset type
		[in] BOOL bInitialState,	// initial state
		[in] LPSTR lpName		// object name
	    );	

	    [
	    entry("OpenEventA"),
	    helpstring("Opens an existing named event object"),
	    ]
	    HANDLE OpenEvent(
		[in] DWORD dwDesiredAccess,	// access
		[in] BOOL bInheritHandle,	// inheritance option
		[in] LPSTR lpName		// object name
	    );

	    [
	    entry("SetEvent"),
	    helpstring("Sets the specified event object to the signaled state"),
	    ]
	    BOOL WINAPI SetEvent(
	        [in] HANDLE hEvent
	        );

	    [
	    entry("ResetEvent"),
	    helpstring("Sets the specified event object to the nonsignaled state"),
	    ]
	    BOOL WINAPI ResetEvent(
	        [in] HANDLE hEvent
	        );

	    [
	    entry("PulseEvent"),
	    helpstring("Sets the specified event object to the signaled state and then resets it to the nonsignaled state after releasing the appropriate number of waiting threads"),
	    ]
	    BOOL WINAPI PulseEvent(
	        [in] HANDLE hEvent
	        );

	    [
	    entry("WaitForSingleObject"),
	    helpstring("Waits until the specified object reaches the signaled state, or until the time-out elapses"),
	    ]
	    DWORD WINAPI WaitForSingleObject(
	        [in] HANDLE hHandle,
	        [in] DWORD dwMilliseconds
	        );

	    [
	    entry("WaitForMultipleObjects"),
	    helpstring("Waits until any one or all of the specified objects reaches the signaled state, or until the time-out elapses"),
	    ]
	    DWORD WINAPI WaitForMultipleObjects(
	        [in] DWORD nCount,
	        [in, out] HANDLE *lpHandles,
	        [in] BOOL bWaitAll,
	        [in] DWORD dwMilliseconds
	        );
	}
	
	[
	helpstring("Advapi Functions"),
        dllname("advapi32.dll")
	]
	module Advapi {

		[
		entry("StartServiceCtrlDispatcherA"),
		helpstring("Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process"),
		]

		BOOL WINAPI StartServiceCtrlDispatcher(
			[in] LPSERVICE_TABLE lpServiceTable   // service table
		);
		
		[
		entry("RegisterServiceCtrlHandlerA"),
		helpstring("Registers a function to handle service control requests"),
		]
		HANDLE WINAPI RegisterServiceCtrlHandler(
			[in] LPSTR lpServiceName,		// service name
			[in] DWORD lpHandlerProc		// handler function
		);

		[
		entry("SetServiceStatus"),
		helpstring("Updates the service control manager's status information for the calling service"),
		]
		BOOL SetServiceStatus(
			[in] HANDLE hServiceStatus,		// service status handle
			[in] LPSERVICE_STATUS lpServiceStatus	// status buffer
		);


	}
    }
